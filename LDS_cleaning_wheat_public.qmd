---
title: "LDS Data Manipulation for Spatial Exante Analytics"
format: html
fig-dpi: 300
fig-width: 8.88
fig-align: center
fig-height: 5

self-contained: true
author: Maxwell Mkondiwa
editor: visual
toc: true
toc-location: left
number-sections: true
execute: 
  message: false
  warning: false
  echo: true
---

# Introduction

In this workbook, we show how the data manipulation steps for the LCAS data to do spatial exante analytics. The data manipulation steps include: (a) variable construction, (b) combine the LCAS with geovariables, e.g., soil grids, and (c) combine the LCAS to climate variables. We then show an interactive table that shows the merged data. We then use the data as inputs in subsequent spatial exante workflows.

We first clear the working, load all the packages and import the data from dataverse. The data is on CIMMYT CSISA dataverse: https://data.cimmyt.org/dataset.xhtml?persistentId=hdl:11529/10548507. To download the data, we use "agro'' R package.

```{r, message=FALSE}
rm(list=ls())         # clear 

library(sp)
library(dplyr)
library(rio)
library(readxl)
library(tidyr)

## Loading required package: agro
if (!require(agro))  source("https://install-github.me/reagro/agro")

ff <- agro::get_data_from_uri("hdl:11529/10548507", ".")
ff

LDS <- read.csv("./hdl_11529_10548507/CSISA_IND_LDS_Whe_2018_Data.csv", stringsAsFactors=FALSE)

```

# Variable construction

```{r}
# Conversions

LDS$C.q306_cropLarestAreaHA=LDS$C.q306_cropLarestAreaAcre*0.405 #acre to ha
LDS$yield_kgperha=LDS$L.tonPerHectare*1000                      #t/ha to kg per ha
LDS$L.q607_farmGatePricePerKg=LDS$L.q607_farmGatePrice/100      # convert to price per kg

# Calculate N, P applied
LDS$F.q51071_gradeNPKN[LDS$F.q51071_gradeNPK=="10_26_26"]=0.10
LDS$F.q51071_gradeNPKN[LDS$F.q51071_gradeNPK=="12_32_16"]=0.12
LDS$F.q51071_gradeNPKN[LDS$F.q51071_gradeNPK=="14_35_14"]=0.14
LDS$F.q51071_gradeNPKN[LDS$F.q51071_gradeNPK=="Other20-13-13"]=0.20
LDS$F.q51071_gradeNPKN[LDS$F.q51071_gradeNPK=="Other20-20-0-13"]=0.20
LDS$F.q51071_gradeNPKN[LDS$F.q51071_gradeNPK=="Other20-20-13"]=0.20
LDS$F.q51071_gradeNPKN=as.numeric(LDS$F.q51071_gradeNPKN)

LDS$F.q51071_gradeNPKP[LDS$F.q51071_gradeNPK=="10_26_26"]=0.26
LDS$F.q51071_gradeNPKP[LDS$F.q51071_gradeNPK=="12_32_16"]=0.32
LDS$F.q51071_gradeNPKP[LDS$F.q51071_gradeNPK=="14_35_14"]=0.35
LDS$F.q51071_gradeNPKP[LDS$F.q51071_gradeNPK=="Other20-13-13"]=0.13
LDS$F.q51071_gradeNPKP[LDS$F.q51071_gradeNPK=="Other20-20-0-13"]=0.20
LDS$F.q51071_gradeNPKP[LDS$F.q51071_gradeNPK=="Other20-20-13"]=0.20
LDS$F.q51071_gradeNPKP=as.numeric(LDS$F.q51071_gradeNPKP)

LDS$F.q51071_gradeNPKK[LDS$F.q51071_gradeNPK=="10_26_26"]=0.26
LDS$F.q51071_gradeNPKK[LDS$F.q51071_gradeNPK=="12_32_16"]=0.16
LDS$F.q51071_gradeNPKK[LDS$F.q51071_gradeNPK=="14_35_14"]=0.14
LDS$F.q51071_gradeNPKK[LDS$F.q51071_gradeNPK=="Other20-13-13"]=0.13
LDS$F.q51071_gradeNPKK[LDS$F.q51071_gradeNPK=="Other20-20-13"]=0.13
LDS$F.q51071_gradeNPKK=as.numeric(LDS$F.q51071_gradeNPKK)

# NPKS -----------
LDS$F.q51211_gradeNPKSN[LDS$F.q51211_gradeNPKS=="16_20_0_13"]=0.16
LDS$F.q51211_gradeNPKSN[LDS$F.q51211_gradeNPKS=="20_20_0_13"]=0.20
LDS$F.q51211_gradeNPKSN=as.numeric(LDS$F.q51211_gradeNPKSN)

LDS$F.q51211_gradeNPKSP[LDS$F.q51211_gradeNPKS=="16_20_0_13"]=0.16
LDS$F.q51211_gradeNPKSP[LDS$F.q51211_gradeNPKS=="20_20_0_13"]=0.20
LDS$F.q51211_gradeNPKSP=as.numeric(LDS$F.q51211_gradeNPKSP)

LDS$F.q51211_gradeNPKSK[LDS$F.q51211_gradeNPKS=="16_20_0_13"]=0.16
LDS$F.q51211_gradeNPKSK[LDS$F.q51211_gradeNPKS=="20_20_0_13"]=0.20
LDS$F.q51211_gradeNPKSK=as.numeric(LDS$F.q51211_gradeNPKSK)

LDS$F.q51211_gradeNPKSS[LDS$F.q51211_gradeNPKS=="16_20_0_13"]=0.13
LDS$F.q51211_gradeNPKSS[LDS$F.q51211_gradeNPKS=="20_20_0_13"]=0.13
LDS$F.q51211_gradeNPKSS=as.numeric(LDS$F.q51211_gradeNPKSS)

# Nutrient Content ----------------------
# Taken from Cedrez, Chamberlain, Guo and Hijmans, p3
### N -----------------------------------
LDS$F.totAmtDAPN=LDS$F.totAmtDAP*0.18 
LDS$F.totAmtUreaN=LDS$F.totAmtUrea*0.46
LDS$F.totAmtNPKN=LDS$F.totAmtNPK*LDS$F.q51071_gradeNPKN
LDS$F.totAmtTSPN=LDS$F.totAmtTSP*0
LDS$F.totAmtSSPN=LDS$F.totAmtSSP*0
LDS$F.totAmtNPKSN=LDS$F.totAmtNPKS*LDS$F.q51211_gradeNPKSN

LDS$N=rowSums(LDS[,c("F.totAmtDAPN","F.totAmtUreaN","F.totAmtNPKN","F.totAmtTSPN","F.totAmtSSPN","F.totAmtNPKSN")],na.rm = TRUE)
LDS$Nperha=LDS$N/LDS$C.q306_cropLarestAreaHA
LDS$NperhaSq=LDS$Nperha*LDS$Nperha

### P ------------------------------------
LDS$F.totAmtDAPP=LDS$F.totAmtDAP*0.46
LDS$F.totAmtUreaP=LDS$F.totAmtUrea*0
LDS$F.totAmtNPKP=LDS$F.totAmtNPK*LDS$F.q51071_gradeNPKP
LDS$F.totAmtTSPP=LDS$F.totAmtTSP*0.45
LDS$F.totAmtSSPP=LDS$F.totAmtSSP*0.2
LDS$F.totAmtNPKSP=LDS$F.totAmtNPKS*LDS$F.q51211_gradeNPKSP

LDS$P2O5=rowSums(LDS[,c("F.totAmtDAPP","F.totAmtUreaP","F.totAmtNPKP","F.totAmtTSPP","F.totAmtSSPP","F.totAmtNPKSP")],na.rm = TRUE)
LDS$P2O5perha=LDS$P2O5/LDS$C.q306_cropLarestAreaHA

# Creating dummy variables ------------------------
LDS$A.q111_fGenderdum[LDS$A.q111_fGender=="female"]=1
LDS$A.q111_fGenderdum[LDS$A.q111_fGender=="male"]=0

varieties=read.csv("LDS wheat variety maturity class.csv")
LDS=merge(LDS,varieties, by="D.q410_varName",all.x=TRUE)
LDS$variety_type_NMWV[LDS$variety_type=="NMWV"]=1
LDS$variety_type_NMWV[LDS$variety_type=="EMWV"]=0
LDS$variety_type_NMWV=as.numeric(LDS$variety_type_NMWV)

# Sowing time new --------------------------------------------------------------
LDS$Sowdate=LDS$D.seedingSowingTransplanting
library(tidyr)
LDS=LDS %>% separate(Sowdate, c("Sday","Smonth", "Syear"))
table(LDS$Sday)
table(LDS$Smonth)
table(LDS$Syear)

LDS$Smonth_issues=0

LDS$Smonth_issues[LDS$Smonth%in%c("11","12","14","15","17","18","20",
                          "22","23","24","25","26","27","29")]=1
LDS$Smonth[LDS$Smonth%in%c("11","12","14","15","17","18","20","22","23","24","25","26","27","29")]="Nov"

LDS$Sday[LDS$Smonth_issues%in%c(1)]=LDS$Smonth[LDS$Smonth_issues%in%c(1)]          
LDS$Syear[LDS$Syear==17]=2017
LDS$Syear[LDS$Syear==18]=2018
LDS$Syear[LDS$Syear==19]=2019

LDS$SowDate_Cleaned=paste(LDS$Sday,LDS$Smonth,LDS$Syear, sep="/")

library(anytime)
LDS$SowDate_Cleaned_Datefmt=anydate(LDS$SowDate_Cleaned)

library(lubridate)
LDS <- LDS %>%
  mutate(., Sowing_week = floor_date(SowDate_Cleaned_Datefmt, unit = "week"))
library(ggplot2)

SowingDates_2017_2019=ggplot(LDS, aes(x=factor(Sowing_week)))+
  geom_bar(stat="count", width=0.7, fill="steelblue")+
  theme_minimal()+
  labs(x="Sowing week")+
  coord_flip()
SowingDates_2017_2019

#ggsave("figures/SowingDates_2017_2019.png", dpi=300)

# Rabi season
LDS$Rabi2017_18=0
LDS$Rabi2017_18[LDS$SowDate_Cleaned_Datefmt< "2018-06-01"]=1
LDS$Sowing_Date_Early=0
LDS$Sowing_Date_Early[LDS$SowDate_Cleaned_Datefmt<"2017-11-21" & LDS$Rabi2017_18==1]=1
LDS$Sowing_Date_Early[LDS$SowDate_Cleaned_Datefmt<"2018-11-21" & LDS$Rabi2017_18==0]=1

# Harvesting time --------------------------------------------------------------
LDS$PrevCropHarvDate=LDS$D.pCHarv
LDS=LDS %>% separate(PrevCropHarvDate, c("Hday","Hmonth", "Hyear"))
LDS$Hyear[LDS$Hyear==17]=2017
LDS$Hyear[LDS$Hyear==18]=2018
LDS$Hyear[LDS$Hyear==19]=2019

LDS$Hmonthnum[LDS$Hmonth=="Jan"]=1
LDS$Hmonthnum[LDS$Hmonth=="Apr"]=4
LDS$Hmonthnum[LDS$Hmonth=="Jun"]=6
LDS$Hmonthnum[LDS$Hmonth=="Jul"]=7
LDS$Hmonthnum[LDS$Hmonth=="Aug"]=8
LDS$Hmonthnum[LDS$Hmonth=="Sep"]=9
LDS$Hmonthnum[LDS$Hmonth=="Oct"]=10
LDS$Hmonthnum[LDS$Hmonth=="Nov"]=11
LDS$Hmonthnum[LDS$Hmonth=="Dec"]=12

LDS$Hdaynum=as.numeric(LDS$Hday)
LDS$Hmonthnum=as.numeric(LDS$Hmonthnum)
LDS$Hyearnum=as.numeric(LDS$Hyear)

library(lubridate)
LDS <- LDS %>% 
  mutate(PrevCropHarvest_date_cleaned=make_date(year=Hyearnum,month=Hmonthnum,day=Hdaynum))

LDS$JanuaryFirst2017=ymd("2017-01-01")
LDS$JanuaryFirst2018=ymd("2018-01-01")
LDS$JanuaryFirst2019=ymd("2019-01-01")

LDS$PrevCropHarvestDayfor1stJan2017<- LDS$PrevCropHarvest_date_cleaned - LDS$JanuaryFirst2017
LDS$PrevCropHarvestDayfor1stJan2018<- LDS$PrevCropHarvest_date_cleaned - LDS$JanuaryFirst2018
LDS$PrevCropHarvestDayfor1stJan2019<- LDS$PrevCropHarvest_date_cleaned - LDS$JanuaryFirst2019

LDS$PrevCropHarvestDayfor1stJan2017_num=as.numeric(LDS$PrevCropHarvestDayfor1stJan2017)
LDS$PrevCropHarvestDayfor1stJan2018_num=as.numeric(LDS$PrevCropHarvestDayfor1stJan2018)
LDS$PrevCropHarvestDayfor1stJan2019_num=as.numeric(LDS$PrevCropHarvestDayfor1stJan2019)

LDS$PrevCropHarvestDayfor1stJan2017[LDS$PrevCropHarvestDayfor1stJan2017<0 | LDS$PrevCropHarvestDayfor1stJan2017>365]=0
LDS$PrevCropHarvestDayfor1stJan2018[LDS$PrevCropHarvestDayfor1stJan2018<0 | LDS$PrevCropHarvestDayfor1stJan2018>365]=0
LDS$PrevCropHarvestDayfor1stJan2019[LDS$PrevCropHarvestDayfor1stJan2019<0 | LDS$PrevCropHarvestDayfor1stJan2019>365]=0

LDS$PrevCropHarvestDay=LDS$PrevCropHarvestDayfor1stJan2017+LDS$PrevCropHarvestDayfor1stJan2018+LDS$PrevCropHarvestDayfor1stJan2019

LDS$PrevCropHarvestDay=as.numeric(LDS$PrevCropHarvestDay)

# Irrigation
LDS$G.q5301_irrigAvail[LDS$G.q5301_irrigAvail=="Yes"]="yes"
LDS$G.q5301_irrigAvail_dum[LDS$G.q5301_irrigAvail=="yes"]=1
LDS$G.q5301_irrigAvail_dum[LDS$G.q5301_irrigAvail=="no"]=0
LDS$G.q5305_irrigTimes_onevsall[LDS$G.q5305_irrigTimes==1]=1
LDS$G.q5305_irrigTimes_onevsall[LDS$G.q5305_irrigTimes>=2]=0
LDS$G.q5305_irrigTimes_twovs1[LDS$G.q5305_irrigTimes==2]=1
LDS$G.q5305_irrigTimes_twovs1[LDS$G.q5305_irrigTimes==1]=0
LDS$G.q5305_irrigTimes_threevs1[LDS$G.q5305_irrigTimes==3]=1
LDS$G.q5305_irrigTimes_threevs1[LDS$G.q5305_irrigTimes==1]=0
LDS$G.q5305_irrigTimes_fourplusvs1[LDS$G.q5305_irrigTimes>=4]=1
LDS$G.q5305_irrigTimes_fourplusvs1[LDS$G.q5305_irrigTimes==1]=0
# Less than 2 versus more irrigation
LDS$G.q5305_irrigTimes_Threeabove[LDS$G.q5305_irrigTimes>=3]=1
LDS$G.q5305_irrigTimes_Threeabove[LDS$G.q5305_irrigTimes<=2]=0

library(stringr)
library(dplyr)

LDS$IrrigSource=NA
LDS$IrrigSource[LDS$G.q5302_irrigSource%in%c("canal","Canal","Canal Other","Canal Pond","Canal Pond Lift","Canal Lift","Pond Dugwell Tank","Pond Lift","River", "River Canal"," River Canal Lift","River Canal Pond")]="Surface"

LDS$IrrigSource[LDS$G.q5302_irrigSource%in%c("Shallow Tubewell","shallowTubeWell","Shallow TubeWell","ShallowTubewell","ShallowTubeWell","ShallowTubeWell","ShallowTubeWell Dugwell","ShallowTubeWell Lift","ShallowTubeWell Other","ShallowTubeWell Tank")]="ShallowTubewell"

LDS$IrrigSource[LDS$G.q5302_irrigSource%in%c("Deep Tubewell","DeepTubewel","DeepTubewell","DeepTubeWell","DeepTubeWell Dugwell")]="DeepTubeWell"

LDS$IrrigSource[LDS$G.q5302_irrigSource%in%c("Canal Pond DeepTubeWell","","Pond DeepTubeWell","Pond ShallowTubeWell","River Canal DeepTubeWell","River Canal ShallowTubeWell")]="Conjuctive"

LDS$IrrigSource[LDS$G.q5301_irrigAvail%in%c("no")]="None"

# Energy source 
LDS$PumpEnergySource=LDS$H.q5406_pumpEnergy
LDS$PumpEnergySource[LDS$PumpEnergySource=="Dielsel"]="Diesel"
LDS$PumpEnergySource[LDS$PumpEnergySource==""]=NA

LDS$PumpEnergySource <- relevel(factor(LDS$PumpEnergySource), ref = "Diesel")
LDS$I.q5502_droughtSeverity<-relevel(factor(LDS$I.q5502_droughtSeverity), ref = "None")
LDS$IrrigSource<-relevel(factor(LDS$IrrigSource), ref = "None")

# Weed management ---------------------
LDS$Weedmanaged[LDS$J.manualWeedTimes!=0 | LDS$J.herbAppTimes!=0]=1
LDS$Weedmanaged[LDS$J.manualWeedTimes==0 & LDS$J.herbAppTimes==0]=0
LDS$Weedherb[LDS$J.herbAppTimes!=0]=1
LDS$Weedherb[LDS$J.herbAppTimes==0]=0
LDS$Weedmanual[LDS$J.manualWeedTimes!=0]=1
LDS$Weedmanual[LDS$J.manualWeedTimes==0]=0

LDS$variety_type_NMWV=as.numeric(LDS$variety_type_NMWV)

LDS$I.q5505_weedSeverity_num[LDS$I.q5505_weedSeverity=="None"]=1
LDS$I.q5505_weedSeverity_num[LDS$I.q5505_weedSeverity=="Low"]=2
LDS$I.q5505_weedSeverity_num[LDS$I.q5505_weedSeverity=="Medium"]=3
LDS$I.q5505_weedSeverity_num[LDS$I.q5505_weedSeverity=="High"]=4

LDS$I.q5506_insectSeverity_num[LDS$I.q5506_insectSeverity=="None"]=1
LDS$I.q5506_insectSeverity_num[LDS$I.q5506_insectSeverity=="Low"]=2
LDS$I.q5506_insectSeverity_num[LDS$I.q5506_insectSeverity=="Medium"]=3
LDS$I.q5506_insectSeverity_num[LDS$I.q5506_insectSeverity=="High"]=4

LDS$I.q5509_diseaseSeverity_num[LDS$I.q5509_diseaseSeverity=="None"]=1
LDS$I.q5509_diseaseSeverity_num[LDS$I.q5509_diseaseSeverity=="Low"]=2
LDS$I.q5509_diseaseSeverity_num[LDS$I.q5509_diseaseSeverity=="Medium"]=3
LDS$I.q5509_diseaseSeverity_num[LDS$I.q5509_diseaseSeverity=="High"]=4

LDS$I.q5504_floodSeverity_num[LDS$I.q5504_floodSeverity=="None"]=1
LDS$I.q5504_floodSeverity_num[LDS$I.q5504_floodSeverity=="Low"]=2
LDS$I.q5504_floodSeverity_num[LDS$I.q5504_floodSeverity=="Medium"]=3
LDS$I.q5504_floodSeverity_num[LDS$I.q5504_floodSeverity=="High"]=4

LDS$I.q5502_droughtSeverity_num[LDS$I.q5502_droughtSeverity=="None"]=1
LDS$I.q5502_droughtSeverity_num[LDS$I.q5502_droughtSeverity=="Low"]=2
LDS$I.q5502_droughtSeverity_num[LDS$I.q5502_droughtSeverity=="Medium"]=3
LDS$I.q5502_droughtSeverity_num[LDS$I.q5502_droughtSeverity=="High"]=4

LDS$D.prevCrop_Fallow[LDS$D.prevCrop=="Fallow"]=1
LDS$D.prevCrop_Fallow[LDS$D.prevCrop!="Fallow"]=0

LDS$D.prevCrop_Rice[LDS$D.prevCrop=="Rice"]=1
LDS$D.prevCrop_Rice[LDS$D.prevCrop!="Rice"]=0

LDS$Nperha_100belowvsabove[LDS$Nperha>=100]=1
LDS$Nperha_100belowvsabove[LDS$Nperha<100]=0

LDS$Nperha_100belowvs100_150[LDS$Nperha>=100 & LDS$Nperha<=150]=1
LDS$Nperha_100belowvs100_150[LDS$Nperha<100]=0

LDS$Nperha_100belowvs150_200[LDS$Nperha>=150 & LDS$Nperha<=200]=1
LDS$Nperha_100belowvs150_200[LDS$Nperha<100]=0

LDS$Nperha_100belowvs200_250[LDS$Nperha>=200 &LDS$Nperha<=250]=1
LDS$Nperha_100belowvs200_250[LDS$Nperha<100]=0

LDS$Nperha_100belowvs200plus[LDS$Nperha>=200]=1
LDS$Nperha_100belowvs200plus[LDS$Nperha<100]=0


# Education
LDS$A.q112_fEdu_new=LDS$A.q112_fEdu

LDS$A.q112_fEdu_new[LDS$A.q112_fEdu_new=="masters"]="Postgrad"
LDS$A.q112_fEdu_new[LDS$A.q112_fEdu_new=="phD"]="Postgrad"


## Creating the key explanatory variables

### Sowing --------------------------------------------------

LDS$Sowing_Date_Schedule[LDS$SowDate_Cleaned_Datefmt<="2017-11-10" & LDS$Rabi2017_18==1]="T1_10Nov"
LDS$Sowing_Date_Schedule[LDS$SowDate_Cleaned_Datefmt<="2018-11-21" & LDS$Rabi2017_18==0]="T1_10Nov"

LDS$Sowing_Date_Schedule[LDS$SowDate_Cleaned_Datefmt>="2017-11-11"& LDS$SowDate_Cleaned_Datefmt<="2017-11-20" & LDS$Rabi2017_18==1]="T2_20Nov"
LDS$Sowing_Date_Schedule[LDS$SowDate_Cleaned_Datefmt>="2018-11-11"& LDS$SowDate_Cleaned_Datefmt<="2018-11-20" & LDS$Rabi2017_18==0]="T2_20Nov"

LDS$Sowing_Date_Schedule[LDS$SowDate_Cleaned_Datefmt>="2017-11-21"& LDS$SowDate_Cleaned_Datefmt<="2017-11-30" & LDS$Rabi2017_18==1]="T3_30Nov"
LDS$Sowing_Date_Schedule[LDS$SowDate_Cleaned_Datefmt>="2018-11-21"& LDS$SowDate_Cleaned_Datefmt<="2018-11-30" & LDS$Rabi2017_18==0]="T3_30Nov"


LDS$Sowing_Date_Schedule[LDS$SowDate_Cleaned_Datefmt>="2017-12-1"& LDS$SowDate_Cleaned_Datefmt<="2017-12-15" & LDS$Rabi2017_18==1]="T4_15Dec"
LDS$Sowing_Date_Schedule[LDS$SowDate_Cleaned_Datefmt>="2018-12-1"& LDS$SowDate_Cleaned_Datefmt<="2018-12-15" & LDS$Rabi2017_18==0]="T4_15Dec"

LDS$Sowing_Date_Schedule[LDS$SowDate_Cleaned_Datefmt>="2017-12-1"& LDS$SowDate_Cleaned_Datefmt<="2017-12-15" & LDS$Rabi2017_18==1]="T4_15Dec"
LDS$Sowing_Date_Schedule[LDS$SowDate_Cleaned_Datefmt>="2018-12-1"& LDS$SowDate_Cleaned_Datefmt<="2018-12-15" & LDS$Rabi2017_18==0]="T4_15Dec"

LDS$Sowing_Date_Schedule[LDS$SowDate_Cleaned_Datefmt>="2017-12-16" & LDS$Rabi2017_18==1]="T5_16Dec"
LDS$Sowing_Date_Schedule[LDS$SowDate_Cleaned_Datefmt>="2018-12-16" & LDS$Rabi2017_18==0]="T5_16Dec"

table(LDS$Sowing_Date_Schedule,LDS$Rabi2017_18)
summary(LDS$Sowing_Date_Schedule)

LDS$Sowing_Date_Schedule_rating_num[LDS$Sowing_Date_Schedule=="T5_16Dec"]=1
LDS$Sowing_Date_Schedule_rating_num[LDS$Sowing_Date_Schedule=="T4_15Dec"]=2
LDS$Sowing_Date_Schedule_rating_num[LDS$Sowing_Date_Schedule=="T3_30Nov"]=3
LDS$Sowing_Date_Schedule_rating_num[LDS$Sowing_Date_Schedule=="T2_20Nov"]=4
LDS$Sowing_Date_Schedule_rating_num[LDS$Sowing_Date_Schedule=="T1_10Nov"]=5

LDS$Sowing_Date_Schedule=ordered(LDS$Sowing_Date_Schedule,levels=c("T5_16Dec","T4_15Dec","T3_30Nov","T2_20Nov","T1_10Nov"))


# Irrigation management -------------------------------
table(LDS$G.q5305_irrigTimes)
LDS$G.q5305_irrigTimes_cat[LDS$G.q5305_irrigTimes==1]="One"
LDS$G.q5305_irrigTimes_cat[LDS$G.q5305_irrigTimes == 2] <- "Two"
LDS$G.q5305_irrigTimes_cat[LDS$G.q5305_irrigTimes == 3] <- "Three"
LDS$G.q5305_irrigTimes_cat[LDS$G.q5305_irrigTimes >= 4] <- "Fourplus"
table(LDS$G.q5305_irrigTimes_cat)

LDS$G.q5305_irrigTimes_cat <- ordered(LDS$G.q5305_irrigTimes_cat, levels = c("One", "Two", "Three","Fourplus"))


```

# Geovariables

The survey data contains approximate GPS locations of the plots. We can use these to extract soil and climate variables that are then included in crop response function.

```{r}

# Function to add Geo-variables 

library(sf)
library(sp)
library(rgdal)
library(terra)
library(raster)
library(geodata)

# add_secondary_lcas <- function (df) {
#   # Remove duplicates and NAs in geo-coordinates
#   #df=subset(df,!(duplicated(df$O.largestPlotGPS.Longitude)))
#   #df=subset(df,!(duplicated(df$O.largestPlotGPS.Latitude)))
#   df=subset(df,!(is.na(df$O.largestPlotGPS.Longitude)))
#   df=subset(df,!(is.na(df$O.largestPlotGPS.Latitude)))
#   df_sp= SpatialPointsDataFrame(cbind(df$O.largestPlotGPS.Longitude,df$O.largestPlotGPS.Latitude),data=df,proj4string=CRS("+proj=longlat +datum=WGS84"))
#   df_sf=st_as_sf(df_sp)
# 
#   population=population(2020,05,path=tempdir())
#   population_geodata=terra::extract(population,vect(df_sf),fun=mean,df=TRUE)
#   elevationglobal_geodata=elevation_global(0.5,path=tempdir())
#   elevation_geodata=terra::extract(elevationglobal_geodata,vect(df_sf),fun=mean,df=TRUE)
#   Soilsand=soil_world("sand",depth=5,path=tempdir())
#   Soilsand_lds=terra::extract(Soilsand,vect(df_sf),fun=mean,df=TRUE)
#   Totalnitrogen=soil_world("nitrogen",depth=5,path=tempdir())
#   Totalnitrogen_lds=terra::extract(Totalnitrogen,vect(df_sf),fun=mean,df=TRUE)
#   soilsoc=soil_world("soc",depth=15,path=tempdir())
#   soilsoc_lds=terra::extract(soilsoc,vect(df_sf),fun=mean,df=TRUE)
# 
#   # Merge all soils and population
#   geodata_df <- list(population_geodata,elevation_geodata,Soilsand_lds,Totalnitrogen_lds,soilsoc_lds)
#   geodata_df=Reduce(function(x, y) merge(x, y, all=TRUE),geodata_df)
#   #geodata_df=return(data.frame(geodata_df))
#   write.csv(geodata_df,paste0("geovariables",".csv"))
#   }
# add_secondary_lcas(LDS)
library(rio)
geovariables=import("geovariables.csv")
LDS=cbind(LDS,geovariables)



```

# Climate variables

The geodata R package has aggregated rainfall and temperature variables. However, we need climate variables specific to the corresponding growing season.

```{r}
library(ncdf4)
library(raster)
library(terra)
library(sf)
library(data.table)
library(exactextractr)


#RUN ONCE
#  add_temp_precip_lcas <- function (df) {
#    # Remove duplicates and NAs in geo-coordinates
#    #df=subset(df,!(duplicated(df$O.largestPlotGPS.Longitude)))
#    #df=subset(df,!(duplicated(df$O.largestPlotGPS.Latitude)))
#    df=subset(df,!(is.na(df$O.largestPlotGPS.Longitude)))
#    df=subset(df,!(is.na(df$O.largestPlotGPS.Latitude)))
#    df_sp= SpatialPointsDataFrame(cbind(df$O.largestPlotGPS.Longitude,df$OlargestPlotGPS.Latitude),data=df,proj4string=CRS("+proj=longlat +datum=WGS84"))
#    
#    df_sf=st_as_sf(df_sp)
#    version = "501"
#    start.yr = 1960
#    num.yrs = ifelse(version=="501", (2017-start.yr+1), (2010-start.yr+1))
#    udel.temp.filename = paste0("air.mon.mean.v",version,".nc")
#    udel.precip.filename = paste0("precip.mon.total.v",version,".nc")
#    # Output location to write results to
#    out.filename = paste0("UDel.aggregated.public.v",version,".csv")
#    out.filename2017 = paste0("UDel.aggregated2017.public.v",version,".csv")
#    yr.offset = start.yr-1900
#    temps = subset(brick(udel.temp.filename), (yr.offset*12+1):(12*(yr.offset+num.yrs)))
#    precip = subset(brick(udel.precip.filename), (yr.offset*12+1):(12*(yr.offset+num.yrs)))
#    # 1. Aggregate across months within a year:  mean for temp, sum for precip
#    annual.temps = stackApply(temps, indices = rep(1:num.yrs, each=12), fun=mean)
#    annual.precip = stackApply(precip, indices = rep(1:num.yrs, each=12), fun=sum)
#    # 2. Aggregate spatially.
#    annual.temps = rotate(annual.temps)
#    annual.precip = rotate(annual.precip)
# 
#    df_sf$idmatching=1:nrow(df_sf)
# 
#    # Aggregate temperatures
#    ctry.temps = rbindlist(lapply(1:num.yrs, FUN=function(yr) {
#    ctry.temps = extract(annual.temps[[yr]], df_sf)
#    # Create data.table of results for this year, including the year
#    return(data.table(hhid=df_sf$idmatching, temp=ctry.temps, yr=yr-1+start.yr))
#  }))
# 
#    #Aggregate precipitation
#    # Note here we're going to multiply precip data by 10.
#    # The UDel data is in cm/year, but Burke et al use mm/year.
#    ctry.precip = rbindlist(lapply(1:num.yrs, FUN=function(yr) {
#    cropped.precip = annual.precip[[yr]]*10
#    ctry.precip = extract(cropped.precip, df_sf)
#    # Create data.table of results for this year, including the year
#    return(data.table(hhid=df_sf$idmatching, precip=ctry.precip, yr=yr-1+start.yr))
#  }))
# 
#  # Combine these results and save
#    all.udel.data = merge(ctry.temps, ctry.precip, by=c("hhid", "yr"))
#    all.udel.data_2017=subset(all.udel.data,all.udel.data$yr=="2017")
#    fwrite(all.udel.data, out.filename)
#    fwrite(all.udel.data_2017, out.filename2017)
#  }
# 
# add_temp_precip_lcas(LDS)

## Temperature and Rainfall -------------------
tempprecip=read.csv("UDel.aggregated2017.public.v501.csv")
tempprecipall=read.csv("UDel.aggregated.public.v501.csv")

tempprecipallwide=reshape(tempprecipall, direction = "wide", idvar = "hhid", timevar = "yr")

tempprecipallwide_small=subset(tempprecipallwide, select=c("precip.2007","temp.2008","precip.2008",
"temp.2009","precip.2009","temp.2010","precip.2010","temp.2011","precip.2011","temp.2012","precip.2012",
"temp.2013","precip.2013","temp.2014","precip.2014","temp.2015","precip.2015","temp.2016","precip.2016","temp.2017","precip.2017"))

LDS=cbind(LDS,tempprecip,tempprecipallwide_small)

# Interactive table of the data
library(reactable)
reactable(LDS)

write.csv(LDS,"LDS_wheat_public_cleaned.csv")
save.image("LDS_Public_Workspace.RData")


```

# Extract monthly variables

```{r}
library(sp)
LDS_sp=SpatialPointsDataFrame(cbind(LDS$O.largestPlotGPS.Longitude,LDS$O.largestPlotGPS.Latitude),data=LDS,proj4string=CRS("+proj=longlat +datum=WGS84"))

library(terra)
LDS_v=vect(LDS_sp)


library(geodata)

India=gadm(country="IND", level=2, path=tempdir())
plot(India)

India_aoi=subset(India,India$NAME_1=="Bihar"|India$NAME_2%in%c("Ballia","Chandauli","Deoria","Ghazipur","Kushinagar","Maharajganj","Mau","Siddharth Nagar","Gorakhpur"))

plot(India_aoi)

plot(India_aoi, add=TRUE)

library(sf)
India_aoi_sf=st_as_sf(India_aoi)
library(mapview)

mapview(India_aoi_sf)

# Dissolve the district polygons to form new polygon of Bihar and EUP
library(sf)
India_aoi_sf_dis=st_union(India_aoi_sf)

India_aoi_sf_dis_sp=as_Spatial(India_aoi_sf_dis)

library(raster)
library(terra)

# March
Maxtemp_2018_march=terra::rast("https://os.zhdk.cloud.switch.ch/envicloud/chelsa/chelsa_V2/GLOBAL/monthly/tasmax/CHELSA_tasmax_03_2018_V.2.1.tif")

tmax_data_march=terra::crop(Maxtemp_2018_march,India_aoi)
tmax_data_march=terra::mask(tmax_data_march,India_aoi)
Maxtemp_2018_march_lds=terra::extract(tmax_data_march,LDS_v,fun=mean)

Maxtemp_2018_march_lds$CHELSA_tasmax_03_2018_V.2.1=Maxtemp_2018_march_lds/100
names(Maxtemp_2018_march_lds)[2]="march_max_temp"

writeRaster(tmax_data_march,"Tmax_aoi_march.tif",overwrite=TRUE)

# April
Maxtemp_2018_april=terra::rast("https://os.zhdk.cloud.switch.ch/envicloud/chelsa/chelsa_V2/GLOBAL/monthly/tasmax/CHELSA_tasmax_04_2018_V.2.1.tif")

tmax_data_april=terra::crop(Maxtemp_2018_april,India_aoi)
tmax_data_april=terra::mask(tmax_data_april,India_aoi)
Maxtemp_2018_april_lds=terra::extract(tmax_data_april,LDS_v,fun=mean)
Maxtemp_2018_april_lds$CHELSA_tasmax_04_2018_V.2.1=Maxtemp_2018_april_lds$CHELSA_tasmax_04_2018_V.2.1/100
names(Maxtemp_2018_april_lds)[2]="april_max_temp"
writeRaster(tmax_data_april,"Tmax_aoi_april.tif",overwrite=TRUE)

# Min 
# March
mintemp_2018_march=terra::rast("https://os.zhdk.cloud.switch.ch/envicloud/chelsa/chelsa_V2/GLOBAL/monthly/tasmin/CHELSA_tasmin_03_2018_V.2.1.tif")

tmin_data_march=terra::crop(mintemp_2018_march,India_aoi)
tmin_data_march=terra::mask(tmin_data_march,India_aoi)
mintemp_2018_march_lds=terra::extract(tmin_data_march,LDS_v,fun=mean)

mintemp_2018_march_lds$CHELSA_tasmin_03_2018_V.2.1=mintemp_2018_march_lds$CHELSA_tasmin_03_2018_V.2.1/100
names(mintemp_2018_march_lds)[2]="march_min_temp"

writeRaster(tmin_data_march,"Tmin_aoi_march.tif",overwrite=TRUE)

# April
mintemp_2018_april=terra::rast("https://os.zhdk.cloud.switch.ch/envicloud/chelsa/chelsa_V2/GLOBAL/monthly/tasmin/CHELSA_tasmin_04_2018_V.2.1.tif")

tmin_data_april=terra::crop(mintemp_2018_april,India_aoi)
tmin_data_april=terra::mask(tmin_data_april,India_aoi)
mintemp_2018_april_lds=terra::extract(tmin_data_april,LDS_v,fun=mean)
mintemp_2018_april_lds$CHELSA_tasmin_04_2018_V.2.1=mintemp_2018_april_lds$CHELSA_tasmin_04_2018_V.2.1/100
names(mintemp_2018_april_lds)[2]="april_min_temp"
writeRaster(tmin_data_april,"Tmin_aoi_april.tif",overwrite=TRUE)

# mean temperature

#nov
meantemp_2017_nov=terra::rast("https://os.zhdk.cloud.switch.ch/envicloud/chelsa/chelsa_V2/GLOBAL/monthly/tas/CHELSA_tas_11_2017_V.2.1.tif")

tmean_data_nov=terra::crop(meantemp_2017_nov,India_aoi)
tmean_data_nov=terra::mask(tmean_data_nov,India_aoi)
meantemp_2017_nov_lds=terra::extract(tmean_data_nov,LDS_v,fun=mean)

meantemp_2017_nov_lds$CHELSA_tas_11_2017_V.2.1=meantemp_2017_nov_lds$CHELSA_tas_11_2017_V.2.1/100
names(meantemp_2017_nov_lds)[2]="nov_mean_temp"

writeRaster(tmean_data_nov,"Tmean_aoi_nov.tif",overwrite=TRUE)

# dec
meantemp_2017_dec=terra::rast("https://os.zhdk.cloud.switch.ch/envicloud/chelsa/chelsa_V2/GLOBAL/monthly/tas/CHELSA_tas_12_2017_V.2.1.tif")

tmean_data_dec=terra::crop(meantemp_2017_dec,India_aoi)
tmean_data_dec=terra::mask(tmean_data_dec,India_aoi)
meantemp_2017_dec_lds=terra::extract(tmean_data_dec,LDS_v,fun=mean)

meantemp_2017_dec_lds$CHELSA_tas_12_2017_V.2.1=meantemp_2017_dec_lds$CHELSA_tas_12_2017_V.2.1/100
names(meantemp_2017_dec_lds)[2]="dec_mean_temp"

writeRaster(tmean_data_dec,"Tmean_aoi_dec.tif",overwrite=TRUE)

# jan
meantemp_2018_jan=terra::rast("https://os.zhdk.cloud.switch.ch/envicloud/chelsa/chelsa_V2/GLOBAL/monthly/tas/CHELSA_tas_01_2018_V.2.1.tif")

tmean_data_jan=terra::crop(meantemp_2018_jan,India_aoi)
tmean_data_jan=terra::mask(tmean_data_jan,India_aoi)
meantemp_2018_jan_lds=terra::extract(tmean_data_jan,LDS_v,fun=mean)

meantemp_2018_jan_lds$CHELSA_tas_01_2018_V.2.1=meantemp_2018_jan_lds$CHELSA_tas_01_2018_V.2.1/100
names(meantemp_2018_jan_lds)[2]="jan_mean_temp"

writeRaster(tmean_data_jan,"Tmean_aoi_jan.tif",overwrite=TRUE)

# feb

meantemp_2018_feb=terra::rast("https://os.zhdk.cloud.switch.ch/envicloud/chelsa/chelsa_V2/GLOBAL/monthly/tas/CHELSA_tas_02_2018_V.2.1.tif")

tmean_data_feb=terra::crop(meantemp_2018_feb,India_aoi)
tmean_data_feb=terra::mask(tmean_data_feb,India_aoi)
meantemp_2018_feb_lds=terra::extract(tmean_data_feb,LDS_v,fun=mean)

meantemp_2018_feb_lds$CHELSA_tas_02_2018_V.2.1=meantemp_2018_feb_lds$CHELSA_tas_02_2018_V.2.1/100
names(meantemp_2018_feb_lds)[2]="feb_mean_temp"

writeRaster(tmean_data_feb,"Tmean_aoi_feb.tif",overwrite=TRUE)

# March
meantemp_2018_march=terra::rast("https://os.zhdk.cloud.switch.ch/envicloud/chelsa/chelsa_V2/GLOBAL/monthly/tas/CHELSA_tas_03_2018_V.2.1.tif")

tmean_data_march=terra::crop(meantemp_2018_march,India_aoi)
tmean_data_march=terra::mask(tmean_data_march,India_aoi)
meantemp_2018_march_lds=terra::extract(tmean_data_march,LDS_v,fun=mean)

meantemp_2018_march_lds$CHELSA_tas_03_2018_V.2.1=meantemp_2018_march_lds$CHELSA_tas_03_2018_V.2.1/100
names(meantemp_2018_march_lds)[2]="march_mean_temp"

writeRaster(tmean_data_march,"Tmean_aoi_march.tif",overwrite=TRUE)

# April
meantemp_2018_april=terra::rast("https://os.zhdk.cloud.switch.ch/envicloud/chelsa/chelsa_V2/GLOBAL/monthly/tas/CHELSA_tas_04_2018_V.2.1.tif")

tmean_data_april=terra::crop(meantemp_2018_april,India_aoi)
tmean_data_april=terra::mask(tmean_data_april,India_aoi)
meantemp_2018_april_lds=terra::extract(tmean_data_april,LDS_v,fun=mean)
meantemp_2018_april_lds$CHELSA_tas_04_2018_V.2.1=meantemp_2018_april_lds$CHELSA_tas_04_2018_V.2.1/100
names(meantemp_2018_april_lds)[2]="april_mean_temp"
writeRaster(tmean_data_april,"Tmean_aoi_april.tif",overwrite=TRUE)


#############

#put all data frames into list
df_list <- list(Maxtemp_2018_march_lds,Maxtemp_2018_april_lds,mintemp_2018_march_lds,mintemp_2018_april_lds,meantemp_2017_dec_lds,meantemp_2017_nov_lds,meantemp_2018_jan_lds,meantemp_2018_feb_lds,meantemp_2018_march_lds,meantemp_2018_april_lds)      

#merge all data frames together
Reduce(function(x, y) merge(x, y, all=TRUE), df_list)

monthly_temp=as.data.frame(df_list)

write.csv(monthly_temp,"monthly_temp.csv")

LDS=cbind(LDS,Maxtemp_2018_march_lds,Maxtemp_2018_april_lds,mintemp_2018_march_lds,mintemp_2018_april_lds,meantemp_2017_dec_lds,meantemp_2017_nov_lds,meantemp_2018_jan_lds,meantemp_2018_feb_lds,meantemp_2018_march_lds,meantemp_2018_april_lds)



```
